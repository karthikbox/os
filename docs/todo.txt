NOTES
######
>>>>>>
pml4_base initially holds physical addr of kernel pml4 table, i.e 0x100000
this is okay during setting up kernel page tables

Keep this in mind, dereferncing base[511]. will page fault. since 0x100000 is not backed up by a page
so convert it into virt addres and then dereference it.
Eg:
*(((pml4 *)(get_virt_addr((uint64_t)base))) +511)
>>>>>>
check format rflags. right now setting only interrupt enable flag while going to user process
>>>>>>
Do not trust user space pointers
>>>>>>
1 page allocated for user stack
Assume 40 pointers (argv+envp) pointing to array of 40 bytes each. Content = 40*40
Pointers: 44*8=360
All this can fit in 4KB user stack.
>>>>>>
user malloc, issue sbrk only on 8 byte alligned boundaries

>>>>>>

ASSUME ENTIRE 511 ENTRY OF PML4 IS OFFLIMITS. IF ANY PROCESS WRITES TO THIS WE GET 101 (5) ERROR CODE IN THE PAGE FAULT HANDLER. MAKE SURE NO USER LAND APPLICATION USES 511. I HAVE GIVEN 511 ENTRY AS SUPERVISOR WRITABLE.

STACK ENDS AT 0xfffffeff70000000ul. WHICH IS 509TH ENTRY OF PML4.  

do not put user USTACK in the 511 pml4 entry. Each process copies 511 entry into its own page tables. Since each process creates a page for USTACK, each one will overwrite previous process's entries while user stack allocation. Because, the the same virt addr will have same pt_entry. this pt_entry every time will get a new page and put into the pt_entry, thus overwriting the previous values. So just keep USTACK below 511 entry of pml4 table.  


%%%%%%%%%%%%%%%

TODO
######
IDT.S
#######
in isr_common:
add code to change ds,gs,es,fs to SEG_UDCODE<<3|DPL_KERNEL before calling isr_common.
add code to change ds,gs,es,fs to SEG_UCODE<<3|DPL_KERNEL before iretq.This part should be added to trapret.
switching to ring 3.
set int 0x80 dpl to 3

 kcs-> 20980000000000 
 kds-> 920000000000 
 ucs-> 20f80000000000 
 uds-> f20000000000 

RING-3 pages
######
change user pages supevisor bit to 1.

KMALLOC
#######
what does kmalloc return on no available memory error. is it NULL? it has to be.
mark pages used for kmalloc data structures as used and never free them to prevent them from being overwritten

EXEC()
######
write free_uvm() in page.c
ustack is not being corretly connected by crt1.c.fix it!!

fork()
######
write fork, to fork a child. context swithc to it. load new TSS.

vma
######
allocate vma
